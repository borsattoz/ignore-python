name: CI

on:
  push:
    branches:
      - master
      - 'releases/**'
  pull_request:
  release:
    types:
      - released
      - prereleased

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: self-hosted
    name: ${{ matrix.conf.os }}-${{ matrix.conf.target }}-${{ matrix.python-version }}-${{ matrix.conf.python-architecture }}-${{ matrix.conf.manylinux }}
    strategy:
      fail-fast: ${{ !( startsWith(github.ref, 'refs/heads/master') || startsWith(github.ref, 'refs/tags/') ) }}
      matrix:
        python-version: 
          - '3.8' 
          - '3.9' 
          - '3.10'
          - '3.11'
          - '3.12'
        conf:
          - { os: ubuntu-latest, target: x86_64,  target-triple: x86_64-unknown-linux-gnu,             manylinux: auto }
          - { os: ubuntu-latest, target: i686,    target-triple: i686-unknown-linux-gnu,               manylinux: auto }
          - { os: ubuntu-latest, target: aarch64, target-triple: aarch64-unknown-linux-gnu,            manylinux: auto }
          - { os: ubuntu-latest, target: armv7,   target-triple: armv7-unknown-linux-gnueabihf,        manylinux: auto }

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.conf.python-architecture }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.conf.target-triple }}

      - name: Setup (Linux)
        if: runner.os == 'Linux'
        env: 
          TARGET_TRIPLE: ${{ matrix.conf.target-triple }}
          WORKSPACE: ${{ github.workspace }}
          BLOSC2_INSTALL_PREFIX: ${{ github.workspace }}/blosc2
        run: |
          sudo apt update
          sudo apt install ninja-build -y

          echo "BLOSC2_INSTALL_PREFIX=$BLOSC2_INSTALL_PREFIX" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$BLOSC2_INSTALL_PREFIX/lib:$BLOSC2_INSTALL_PREFIX/lib64" >> $GITHUB_ENV

          # maturin action fails building blosc2 for armv7 and aarch64
          # so we'll just use 'cross' to build and pass it in for the action for all archs
          # nothing special for the revision pin, just deterministic install
          cargo install cross --git https://github.com/cross-rs/cross --rev 6d097fb
          cross build --release --target $TARGET_TRIPLE --package blosc2-sys --target-dir build
          blosc2_sys_dir=$(ls build/$TARGET_TRIPLE/release/build/ | grep blosc2-sys)
          mv $WORKSPACE/build/$TARGET_TRIPLE/release/build/$blosc2_sys_dir/out $BLOSC2_INSTALL_PREFIX
          tree -L 2 $BLOSC2_INSTALL_PREFIX

      - name: Rust Tests
        if: matrix.conf.target == 'x86_64' && matrix.python-version == '3.12'
        run: cargo test

      - name: Build wheel (Linux)
        if: runner.os == 'Linux'
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.conf.target }}
          manylinux: ${{ matrix.conf.manylinux }}
          docker-options: -e BLOSC2_INSTALL_PREFIX=${{ github.workspace }}/blosc2 -e LD_LIBRARY_PATH=${{ github.workspace }}/blosc2/lib:${{ github.workspace }}/blosc2/lib64
          args: -i ${{ matrix.python-version }} --release --out dist --features use-system-blosc2
          before-script-linux: ls -l $BLOSC2_INSTALL_PREFIX

      - name: Install built wheel (Native)
        run: |
          # Second install guarantees it's going to install from local dir w/ --no-index
          # use first to get in dev dependencies
          python -m pip install ignore-python --pre --no-index --find-links dist --force-reinstall

      - name: Install built wheel (Cross)
        if: |
          runner.os == 'Linux' &&
          contains(fromJson('["armv7", "aarch64"]'), matrix.conf.target) 
        uses: uraimo/run-on-arch-action@v2.7.1
        with:
          arch: ${{ matrix.conf.target }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          # Mount the dist directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/dist:/artifacts"
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-venv software-properties-common
            add-apt-repository ppa:deadsnakes/ppa
            apt-get update
            apt-get install -y curl python${{ matrix.python-version }}-venv
          run: |
            ls -lrth /artifacts
            PYTHON=python${{ matrix.python-version }}
            $PYTHON -m venv venv
            venv/bin/pip install -U pip
            venv/bin/pip install ignore-python --pre --no-index --find-links /artifacts --force-reinstall
            venv/bin/python -c 'import ignore'

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        if: ${{ ( startsWith(github.ref, 'refs/heads/master') || startsWith(github.ref, 'refs/tags/') ) }}
        with:
          name: dist
          path: dist

  build-sdist:
    name: Build sdists
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Build sdist ignore-python
        run: |
          python -m pip install build
          python -m build --sdist -o ./dist
      - name: Upload sdists
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

  pypi-publish:
    name: Upload release to PyPI
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      fail-fast: false
    runs-on: self-hosted
    needs: [build-test, build-sdist]
    environment:
      name: pypi
      url: https://pypi.org/p/ignore-python
    permissions:
      id-token: write
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: dist
    - name: List artifacts
      run: ls -lhs
    - name: Publish package distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        packages-dir: ./

  gh-publish:
    name: Publish artifacts to GH
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    needs: [build-test, build-sdist]
    runs-on: self-hosted
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: dist
    - name: List artifacts
      run: ls -lhs
    - name: Upload to GitHub
      uses: softprops/action-gh-release@v2
      with:
        files: ./*
